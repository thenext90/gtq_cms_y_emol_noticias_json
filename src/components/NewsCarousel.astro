---
// Import the news data passed as props
const { newsData = [] } = Astro.props;
---

<section id="news-carousel" class="py-16 bg-gradient-to-br from-blue-50 to-indigo-100">
  <div class="max-w-7xl mx-auto px-6 lg:px-8">
    <div class="grid lg:grid-cols-4 gap-8 items-center">
      <!-- Título de la sección -->
      <div class="lg:col-span-1">
        <div class="text-center lg:text-left">
          <h2 class="text-3xl font-bold text-gray-900 mb-4">
            Noticias Destacadas
          </h2>
          <p class="text-lg text-gray-600 mb-6">
            Las últimas novedades sobre certificaciones ISO y gestión de calidad.
          </p>
          <div class="flex justify-center lg:justify-start space-x-2">
            <button id="prev-btn" class="p-2 rounded-full bg-white shadow hover:bg-gray-100 focus:outline-none">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
              </svg>
            </button>
            <button id="next-btn" class="p-2 rounded-full bg-white shadow hover:bg-gray-100 focus:outline-none">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </button>
          </div>
        </div>
      </div>

      <!-- Carousel de noticias -->
      <div class="lg:col-span-3">
        <div class="relative">
          <!-- Contenedor del carousel -->
          <div id="news-carousel-container" class="overflow-hidden rounded-xl">
            <div id="news-track" class="flex transition-transform duration-500 ease-in-out gap-4">
              {newsData.map((noticia) => (
                <div class="w-full md:w-[calc(50%-0.5rem)] lg:w-[calc(33.333%-0.67rem)] flex-shrink-0">
                  <a href={noticia.link} class="block h-full bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300">
                    {noticia.imagen && (
                      <div class="relative w-full h-48 overflow-hidden rounded-t-lg">
                        <img 
                          src={noticia.imagen} 
                          alt={noticia.titulo || 'Noticia'} 
                          class="w-full h-full object-cover transition-transform duration-300 hover:scale-105"
                        />
                      </div>
                    )}
                    <div class="p-6">
                      {noticia.fecha && (
                        <p class="text-sm text-blue-600 font-medium mb-2">
                          {new Date(noticia.fecha).toLocaleDateString('es-ES', {
                            year: 'numeric',
                            month: 'long',
                            day: 'numeric'
                          })}
                        </p>
                      )}
                      <h3 class="text-xl font-semibold text-gray-900 mb-2">{noticia.titulo}</h3>
                      <p class="text-gray-700">{noticia.descripcion || ''}</p>
                    </div>
                  </a>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const track = document.getElementById('news-track');
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');
    
    if (!track || !prevBtn || !nextBtn) return;
    
    let currentIndex = 0;
    
    // Calculate items visible based on screen width
    function getVisibleItems() {
      return window.innerWidth >= 1024 ? 3 : window.innerWidth >= 768 ? 2 : 1;
    }
    
    // Update track position
    function updateTrack() {
      const itemWidth = 100 / getVisibleItems();
      track.style.transform = `translateX(-${currentIndex * itemWidth}%)`;
    }
    
    // Previous button click
    prevBtn.addEventListener('click', function() {
      currentIndex = Math.max(0, currentIndex - 1);
      updateTrack();
    });
    
    // Next button click
    nextBtn.addEventListener('click', function() {
      const maxIndex = Math.max(0, newsData.length - getVisibleItems());
      currentIndex = Math.min(maxIndex, currentIndex + 1);
      updateTrack();
    });
    
    // Handle window resize
    window.addEventListener('resize', function() {
      // Reset position to prevent out-of-bounds
      currentIndex = 0;
      updateTrack();
    });
  });
</script>