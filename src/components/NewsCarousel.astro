---
// Import the news data passed as props
const { newsData = [] } = Astro.props;
---

<section id="news-carousel" class="py-16 bg-gradient-to-br from-blue-50 to-indigo-100">
  <div class="max-w-7xl mx-auto px-6 lg:px-8">
    <div class="grid lg:grid-cols-4 gap-8 items-center">
      <!-- Título de la sección -->
      <div class="lg:col-span-1">
        <div class="text-center lg:text-left">
          <h2 class="text-4xl lg:text-5xl font-extrabold text-gray-900 mb-4">
            Últimas Noticias ISO
          </h2>
          <p class="text-lg text-gray-600 mb-6">
            Mantente actualizado con las últimas tendencias, regulaciones y mejores prácticas en gestión ISO.
          </p>
          <button class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-full font-semibold transition-colors duration-300">
            Ver Todas las Noticias
          </button>
        </div>
      </div>

      <!-- Carousel de noticias -->
      <div class="lg:col-span-3">
        <div class="relative">
          <!-- Contenedor del carousel -->
          <div id="news-carousel-container" class="overflow-hidden rounded-xl">
            <div id="news-track" class="flex gap-4 pb-4">
              {newsData.map((noticia) => (
                <div class="w-full md:w-[calc(50%-0.5rem)] lg:w-[calc(33.333%-0.67rem)] flex-shrink-0">
                  <a href={noticia.link} class="block h-full bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300">
                    {noticia.imagen && (
                      <div class="relative w-full h-48 overflow-hidden rounded-t-lg">
                        <img 
                          src={noticia.imagen} 
                          alt={noticia.titulo || 'Noticia'} 
                          class="w-full h-full object-cover transition-transform duration-300 hover:scale-105"
                        />
                      </div>
                    )}
                    <div class="p-6">
                      {noticia.fecha && (
                        <p class="text-sm text-blue-600 font-medium mb-2">
                          {new Date(noticia.fecha).toLocaleDateString('es-ES', {
                            year: 'numeric',
                            month: 'long',
                            day: 'numeric'
                          })}
                        </p>
                      )}
                      <h3 class="text-xl font-semibold text-gray-900 mb-2">{noticia.titulo}</h3>
                      <p class="text-gray-700">{noticia.descripcion || ''}</p>
                    </div>
                  </a>
                </div>
              ))}
            </div>
          </div>

          <!-- Navigation Controls -->
          <div class="flex justify-center mt-6 gap-2">
            <button id="prev-btn" class="p-2 rounded-full bg-white shadow hover:bg-gray-100 focus:outline-none">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
              </svg>
            </button>
            <button id="next-btn" class="p-2 rounded-full bg-white shadow hover:bg-gray-100 focus:outline-none">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const track = document.getElementById('news-track');
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');
    
    if (!track || !prevBtn || !nextBtn) return;
    
    let currentPosition = 0;
    const slides = Array.from(track.children);
    
    // Simple calculation for items per view based on screen width
    function getItemsPerView() {
      if (window.innerWidth >= 1024) return 3;
      if (window.innerWidth >= 768) return 2;
      return 1;
    }
    
    function updateCarousel() {
      // Get the width of a single slide (including gap)
      const slideWidth = slides[0].offsetWidth;
      const slideGap = 16; // 1rem gap
      const totalWidth = slideWidth + slideGap;
      
      track.style.transition = 'transform 0.3s ease-in-out';
      track.style.transform = `translateX(-${currentPosition * totalWidth}px)`;
    }
    
    function updateButtons() {
      prevBtn.disabled = currentPosition <= 0;
      nextBtn.disabled = currentPosition >= slides.length - getItemsPerView();
      
      prevBtn.style.opacity = prevBtn.disabled ? '0.5' : '1';
      nextBtn.style.opacity = nextBtn.disabled ? '0.5' : '1';
    }
    
    prevBtn.addEventListener('click', () => {
      if (currentPosition > 0) {
        currentPosition--;
        updateCarousel();
        updateButtons();
      }
    });
    
    nextBtn.addEventListener('click', () => {
      if (currentPosition < slides.length - getItemsPerView()) {
        currentPosition++;
        updateCarousel();
        updateButtons();
      }
    });
    
    // Initialize carousel
    if (slides.length > 0) {
      updateButtons();
    }
    
    // Handle window resize
    window.addEventListener('resize', () => {
      // Reset position when screen size changes categories
      currentPosition = 0;
      updateCarousel();
      updateButtons();
    });
  });
</script>