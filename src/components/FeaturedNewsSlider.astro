---
// FeaturedNewsSlider - A clean, modern news carousel with auto-rotation
const { newsItems = [] } = Astro.props;
---

<section class="featured-news-slider py-16 bg-gradient-to-b from-blue-50 to-white">
  <div class="max-w-7xl mx-auto px-6 lg:px-8">
    <div class="text-center mb-12">
      <h2 class="text-3xl font-bold text-gray-900 mb-3">Noticias Destacadas</h2>
      <p class="text-gray-600 max-w-2xl mx-auto">
        Mantente informado con las Ãºltimas novedades del sector y actualizaciones sobre normativas ISO
      </p>
    </div>

    <div class="relative">
      <!-- Slider container -->
      <div class="overflow-hidden rounded-xl">
        <div id="slider-track" class="flex transition-all duration-500 ease-out">
          {newsItems.map((news, index) => (
            <div class="slider-item min-w-full md:min-w-[50%] lg:min-w-[33.333%] px-3">
              <a href={news.link} class="block h-full bg-white rounded-lg shadow-md hover:shadow-lg transition-all duration-300 overflow-hidden">
                <!-- Image section -->
                {news.imagen && (
                  <div class="relative w-full h-52 overflow-hidden">
                    <img 
                      src={news.imagen} 
                      alt={news.titulo || 'Noticia'} 
                      class="w-full h-full object-cover transition-transform hover:scale-105 duration-300"
                    />
                  </div>
                )}
                <!-- Content section -->
                <div class="p-6">
                  <!-- Date -->
                  {news.fecha && (
                    <p class="text-sm text-blue-600 font-medium mb-2 flex items-center">
                      <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                      </svg>
                      {new Date(news.fecha).toLocaleDateString('es-ES', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                      })}
                    </p>
                  )}
                  <!-- Title -->
                  <h3 class="text-xl font-semibold text-gray-900 mb-3 line-clamp-2">{news.titulo}</h3>
                  <!-- Brief description -->
                  <p class="text-gray-600 line-clamp-3">{news.descripcion || ''}</p>
                </div>
              </a>
            </div>
          ))}
        </div>
      </div>

      <!-- Navigation arrows -->
      <button id="prev-button" class="absolute top-1/2 -left-4 transform -translate-y-1/2 bg-white rounded-full p-2 shadow-md hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 z-10 transition-all duration-300 opacity-70 hover:opacity-100">
        <svg class="w-6 h-6 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
      </button>
      <button id="next-button" class="absolute top-1/2 -right-4 transform -translate-y-1/2 bg-white rounded-full p-2 shadow-md hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 z-10 transition-all duration-300 opacity-70 hover:opacity-100">
        <svg class="w-6 h-6 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
      </button>
    </div>

    <!-- Indicator dots -->
    <div class="flex justify-center mt-8 space-x-2" id="slider-dots"></div>
    
    <!-- Progress bar -->
    <div class="max-w-sm mx-auto mt-4">
      <div class="bg-gray-200 h-1 rounded-full overflow-hidden">
        <div id="progress-bar" class="bg-blue-600 h-1 rounded-full transition-all duration-300" style="width: 0%"></div>
      </div>
    </div>
  </div>
</section>

<style>
  /* Truncate text to specific number of lines */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  @media (max-width: 768px) {
    #prev-button, #next-button {
      top: auto;
      bottom: -50px;
      transform: none;
    }
    #prev-button { left: calc(50% - 40px); }
    #next-button { right: calc(50% - 40px); }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const track = document.getElementById('slider-track');
    const items = document.querySelectorAll('.slider-item');
    const prevButton = document.getElementById('prev-button');
    const nextButton = document.getElementById('next-button');
    const dotsContainer = document.getElementById('slider-dots');
    const progressBar = document.getElementById('progress-bar');
    
    if (!track || items.length === 0 || !prevButton || !nextButton || !dotsContainer || !progressBar) return;

    // Configuration
    const autoplayInterval = 5000; // 5 seconds
    let currentIndex = 0;
    let autoplayTimer;
    let itemsPerView = 1;
    
    // Create indicator dots
    function createDots() {
      dotsContainer.innerHTML = '';
      const totalPages = Math.ceil(items.length / itemsPerView);
      
      for (let i = 0; i < totalPages; i++) {
        const dot = document.createElement('button');
        dot.className = `w-3 h-3 rounded-full transition-all duration-300 ${i === 0 ? 'bg-blue-600' : 'bg-gray-300'}`;
        dot.setAttribute('aria-label', `Go to slide ${i + 1}`);
        dot.addEventListener('click', () => goToSlide(i * itemsPerView));
        dotsContainer.appendChild(dot);
      }
    }
    
    // Update items per view based on screen width
    function updateItemsPerView() {
      const width = window.innerWidth;
      if (width >= 1024) {
        itemsPerView = 3;
      } else if (width >= 768) {
        itemsPerView = 2;
      } else {
        itemsPerView = 1;
      }
      createDots();
      return itemsPerView;
    }
    
    // Go to specific slide
    function goToSlide(index) {
      currentIndex = Math.min(Math.max(index, 0), items.length - itemsPerView);
      updateSlider();
      resetAutoplay();
    }
    
    // Update slider position and indicators
    function updateSlider() {
      // Calculate the percentage to translate
      const translatePercent = -(currentIndex * (100 / itemsPerView));
      track.style.transform = `translateX(${translatePercent}%)`;
      
      // Update dots
      const activeDotIndex = Math.floor(currentIndex / itemsPerView);
      const dots = dotsContainer.querySelectorAll('button');
      dots.forEach((dot, i) => {
        if (i === activeDotIndex) {
          dot.className = 'w-3 h-3 rounded-full bg-blue-600 transition-all duration-300';
        } else {
          dot.className = 'w-3 h-3 rounded-full bg-gray-300 transition-all duration-300';
        }
      });
      
      // Reset progress bar
      progressBar.style.width = '0%';
    }
    
    // Progress animation
    function animateProgress() {
      progressBar.style.width = '0%';
      
      let startTime = null;
      function step(timestamp) {
        if (!startTime) startTime = timestamp;
        const elapsed = timestamp - startTime;
        const progress = Math.min(elapsed / autoplayInterval * 100, 100);
        
        progressBar.style.width = `${progress}%`;
        
        if (progress < 100) {
          requestAnimationFrame(step);
        }
      }
      
      requestAnimationFrame(step);
    }
    
    // Next slide
    function nextSlide() {
      if (currentIndex < items.length - itemsPerView) {
        currentIndex++;
      } else {
        currentIndex = 0; // Loop back to first slide
      }
      updateSlider();
    }
    
    // Previous slide
    function prevSlide() {
      if (currentIndex > 0) {
        currentIndex--;
      } else {
        currentIndex = items.length - itemsPerView; // Loop to last slide
      }
      updateSlider();
    }
    
    // Start autoplay
    function startAutoplay() {
      stopAutoplay();
      autoplayTimer = setInterval(() => {
        nextSlide();
        animateProgress();
      }, autoplayInterval);
      animateProgress();
    }
    
    // Stop autoplay
    function stopAutoplay() {
      clearInterval(autoplayTimer);
    }
    
    // Reset autoplay
    function resetAutoplay() {
      stopAutoplay();
      startAutoplay();
    }
    
    // Event listeners
    prevButton.addEventListener('click', () => {
      prevSlide();
      resetAutoplay();
    });
    
    nextButton.addEventListener('click', () => {
      nextSlide();
      resetAutoplay();
    });
    
    // Pause autoplay on hover
    track.addEventListener('mouseenter', stopAutoplay);
    track.addEventListener('mouseleave', startAutoplay);
    
    // Handle window resize
    window.addEventListener('resize', () => {
      const oldItemsPerView = itemsPerView;
      updateItemsPerView();
      
      if (oldItemsPerView !== itemsPerView) {
        goToSlide(Math.floor(currentIndex / oldItemsPerView) * itemsPerView);
      }
    });
    
    // Initialize
    updateItemsPerView();
    startAutoplay();
  });
</script>