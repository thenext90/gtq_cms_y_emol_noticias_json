---
import CourseCard from './CourseCard.astro';
import coursesData from '../data/courses.json';
---

<section id="courses" class="py-16 bg-gradient-to-br from-blue-50 to-indigo-100">
  <div class="max-w-7xl mx-auto px-6 lg:px-8">
    <div class="grid lg:grid-cols-4 gap-8 items-center">
      <!-- Título de la sección -->
      <div class="lg:col-span-1">
        <div class="text-center lg:text-left">
          <h2 class="text-4xl lg:text-5xl font-extrabold text-gray-900 mb-4">
            Cursos Más Populares
          </h2>
          <p class="text-lg text-gray-600 mb-6">
            Descubre nuestros cursos mejor valorados y comienza tu transformación profesional hoy.
          </p>
          <button class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-full font-semibold transition-colors duration-300">
            Ver Todos los Cursos
          </button>
        </div>
      </div>

      <!-- Carousel de cursos -->
      <div class="lg:col-span-3">
        <div class="relative">
          <!-- Contenedor del carousel -->
          <div 
            id="courses-carousel" 
            class="overflow-hidden rounded-xl"
          >
            <div 
              id="courses-track" 
              class="flex transition-transform duration-500 ease-in-out"
              style="transform: translateX(0%)"
            >
              {coursesData.map((course) => (
                <div class="w-full md:w-1/2 lg:w-1/3 flex-shrink-0">
                  <CourseCard course={course} />
                </div>
              ))}
            </div>
          </div>

          <!-- Controles de navegación -->
          <button 
            id="prev-btn"
            class="absolute left-2 top-1/2 transform -translate-y-1/2 bg-white/90 hover:bg-white text-gray-800 p-3 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 z-10 backdrop-blur-sm"
            aria-label="Curso anterior"
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
          </button>

          <button 
            id="next-btn"
            class="absolute right-2 top-1/2 transform -translate-y-1/2 bg-white/90 hover:bg-white text-gray-800 p-3 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 z-10 backdrop-blur-sm"
            aria-label="Siguiente curso"
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
          </button>
        </div>

        <!-- Indicadores de puntos -->
        <div class="flex justify-center mt-6 space-x-2" id="dots-container">
          <!-- Los dots se generarán dinámicamente con JavaScript -->
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const track = document.getElementById('courses-track') as HTMLElement | null;
    const prevBtn = document.getElementById('prev-btn') as HTMLButtonElement | null;
    const nextBtn = document.getElementById('next-btn') as HTMLButtonElement | null;
    const dotsContainer = document.getElementById('dots-container') as HTMLElement | null;
    
    if (!track || !prevBtn || !nextBtn || !dotsContainer) return;

    const cards = track.children;
    const totalCourses = cards.length;
    
    // Configuración responsive
    let coursesPerView = 1;
    let currentIndex = 0;
    let autoplayInterval: number;

    // Función para determinar cuántos cursos mostrar según el tamaño de pantalla
    function updateCoursesPerView() {
      if (window.innerWidth >= 1024) {
        coursesPerView = 3; // lg: 3 cursos
      } else if (window.innerWidth >= 768) {
        coursesPerView = 2; // md: 2 cursos
      } else {
        coursesPerView = 1; // sm: 1 curso
      }
    }

    // Calcular el número total de páginas
    function getTotalPages() {
      return Math.ceil(totalCourses / coursesPerView);
    }

    // Crear indicadores de puntos
    function createDots() {
      if (!dotsContainer) return;
      dotsContainer.innerHTML = '';
      const totalPages = getTotalPages();
      
      for (let i = 0; i < totalPages; i++) {
        const dot = document.createElement('button');
        dot.className = `w-3 h-3 rounded-full transition-all duration-300 ${
          i === 0 ? 'bg-blue-600 w-8' : 'bg-gray-300 hover:bg-gray-400'
        }`;
        dot.setAttribute('aria-label', `Ir a la página ${i + 1}`);
        dot.addEventListener('click', () => goToPage(i));
        dotsContainer.appendChild(dot);
      }
    }

    // Actualizar la posición del carousel
    function updateCarousel() {
      if (!track) return;
      const translateX = -(currentIndex * (100 / coursesPerView));
      track.style.transform = `translateX(${translateX}%)`;
      updateDots();
    }

    // Actualizar indicadores de puntos
    function updateDots() {
      if (!dotsContainer) return;
      const dots = dotsContainer.children;
      const currentPage = Math.floor(currentIndex / coursesPerView);
      
      Array.from(dots).forEach((dot, index) => {
        if (index === currentPage) {
          (dot as HTMLElement).className = 'w-8 h-3 rounded-full bg-blue-600 transition-all duration-300';
        } else {
          (dot as HTMLElement).className = 'w-3 h-3 rounded-full bg-gray-300 hover:bg-gray-400 transition-all duration-300';
        }
      });
    }

    // Ir a una página específica
    function goToPage(pageIndex: number) {
      currentIndex = pageIndex * coursesPerView;
      const maxIndex = totalCourses - coursesPerView;
      if (currentIndex > maxIndex) {
        currentIndex = maxIndex;
      }
      updateCarousel();
    }

    // Ir al siguiente conjunto de cursos
    function goNext() {
      const maxIndex = totalCourses - coursesPerView;
      if (currentIndex < maxIndex) {
        currentIndex += coursesPerView;
        if (currentIndex > maxIndex) {
          currentIndex = maxIndex;
        }
      } else {
        currentIndex = 0; // Volver al inicio
      }
      updateCarousel();
    }

    // Ir al conjunto anterior de cursos
    function goPrev() {
      if (currentIndex > 0) {
        currentIndex -= coursesPerView;
        if (currentIndex < 0) {
          currentIndex = 0;
        }
      } else {
        // Ir al final
        const maxIndex = totalCourses - coursesPerView;
        currentIndex = maxIndex;
      }
      updateCarousel();
    }

    // Autoplay
    function startAutoplay() {
      autoplayInterval = window.setInterval(goNext, 4000); // Cambiar cada 4 segundos
    }

    function stopAutoplay() {
      clearInterval(autoplayInterval);
    }

    // Event listeners
    nextBtn.addEventListener('click', () => {
      stopAutoplay();
      goNext();
      startAutoplay();
    });

    prevBtn.addEventListener('click', () => {
      stopAutoplay();
      goPrev();
      startAutoplay();
    });

    // Pausar autoplay al hacer hover
    if (track) {
      track.addEventListener('mouseenter', stopAutoplay);
      track.addEventListener('mouseleave', startAutoplay);
    }

    // Manejar cambio de tamaño de ventana
    window.addEventListener('resize', () => {
      updateCoursesPerView();
      currentIndex = 0; // Resetear al inicio en resize
      createDots();
      updateCarousel();
    });

    // Inicialización
    updateCoursesPerView();
    createDots();
    updateCarousel();
    startAutoplay();

    // Soporte para navegación con teclado
    document.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowLeft') {
        stopAutoplay();
        goPrev();
        startAutoplay();
      } else if (e.key === 'ArrowRight') {
        stopAutoplay();
        goNext();
        startAutoplay();
      }
    });
  });
</script>

<style>
  /* Estilos adicionales para mejorar la experiencia */
  #courses-carousel {
    touch-action: pan-y pinch-zoom;
  }

  /* Smooth scroll behavior */
  #courses-track {
    will-change: transform;
  }

  /* Hover effects para los controles */
  button:focus {
    outline: 2px solid #3B82F6;
    outline-offset: 2px;
  }

  /* Optimización para dispositivos móviles */
  @media (max-width: 768px) {
    #prev-btn, #next-btn {
      padding: 0.5rem;
    }
    
    #prev-btn svg, #next-btn svg {
      width: 1rem;
      height: 1rem;
    }
  }
</style>
